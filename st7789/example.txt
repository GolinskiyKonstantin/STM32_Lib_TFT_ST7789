/*	сохраняем данный файл в кодировке UTF-8		*/


 author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com
 
 
//===================================================

//----- SPI2 parameter configuration ----------------------------------------

// SPI включаем только передача ( MOSI SCK )
// настройка SPI, скорость максимальная, 1 Line (TX only), Polarity High, Phase 2Edge:
// частота SPI должна быть меньше 50 МГц

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
  
//-----------------------------------------------------------------------------



в файле fonts.h нужно выбрать шрифты:

//---- для экономии памяти шрифты которые не используються закоментировать -------------------------------------
			// Шрифт имеет кирилицу и латиницу
			#define FONT_6x8		//  6 x 8 pixels font size structure 
			#define FONT_7x9		//  7 x 9 pixels font size structure 
			#define FONT_11x18		//  11 x 18 pixels font size structure 
			#define FONT_16x26		//  16 x 26 pixels font size structure 
			// Только цифры -- only numbers
			#define FONT_16x28		//  16 x 28 pixels font size structure only numbers	
//--------------------------------------------------------------------------------------------------------------

в файле ST7789.h указываем настройки:

//#######  SETUP  ##############################################################################################
		
		//==== выбераем через что будем отправлять через HAL или CMSIS(быстрее) ==================
		//-- нужное оставляем другое коментируем ( важно должно быть только один выбран )---------
		
			// указываем порт SPI для CMSIS ( быстро )-------
			// так как у разных МК разные регистры то в функциях корректируем под свой МК
			// на данный момент есть реализация на серию F1 F4 H7 для выбора серии в функциях
			//	void ST7789_SendCmd(uint8_t Cmd);
			//	void ST7789_SendData(uint8_t Data );
			//	void ST7789_SendDataMASS(uint8_t* buff, size_t buff_size);	
			// комментируем и раскомментируем то что нам нужно, также там же редактируем под свой МК если не работает
			#define 	ST7789_SPI_CMSIS 	SPI2
			//-----------------------------------------------
			
			// указываем порт SPI для HAL ( медлено )--------
			//#define 	ST7789_SPI_HAL 		hspi2
			//-----------------------------------------------
			
		//============================================================================
		
			// выбираем как выводить информацию через буфер кадра или попиксельно ( 1-буфер кадра, 0-попиксельный вывод ) -----
			// через буфер быстре если много информации обнавлять за один раз ( требует много оперативки для массива )
			// по пиксельно рисует онлайн буз буферра если информация обновляеться немного то выгодно испотзовать данный режим
			#define FRAME_BUFFER				0
			//-----------------------------------------------------------------------------------------------------------------
			
		//=== указываем порты ( если в кубе назвали их DC RES CS то тогда нечего указывать не нужно )
		#if defined (DC_GPIO_Port)
		#else
			#define DC_GPIO_Port	GPIOA
			#define DC_Pin			GPIO_PIN_11
		#endif
		
		#if defined (RES_GPIO_Port)
		#else
			#define RES_GPIO_Port   GPIOA
			#define RES_Pin			GPIO_PIN_12
		#endif
		
		//--  Cесли используем порт CS для выбора устройства тогда раскомментировать ------------
		// если у нас одно устройство лучше пин CS притянуть к земле( или на порту подать GND )
		
		//#define CS_PORT
		
		//----------------------------------------------------------------------------------------
		#ifdef CS_PORT
			#if defined (CS_GPIO_Port)
			#else
				#define CS_GPIO_Port    GPIOA
				#define CS_Pin			GPIO_PIN_14
			#endif
		#endif
		
		//=============================================================================
		
		//==  выбираем дисплей: =======================================================
		//-- нужное оставляем другое коментируем ( важно должно быть только один выбран )---------
		
		//#define	ST7789_IS_135X240		// 1.14" 135 x 240 ST7789 
		#define	ST7789_IS_240X240		// 1.3" 240 x 240 ST7789 		
		//#define	ST7789_IS_240X320		// 2" 240 x 320 ST7789
		
		//=============================================================================
		
		
//##############################################################################################################





//=========================================================


#include <ST7789.h>

#include "bitmap.h"
#include "fonts.h"


#include "stdio.h"
	.........
	.........

main()=============================================================================================================================
	
/////////////////////////////////////////////////////////////////////////////////////////////////////

	// включаем подсветку дисплея BLK
	HAL_GPIO_WritePin( BLK_GPIO_Port, BLK_Pin, GPIO_PIN_SET );

	// Процедура инициализации дисплея ST7789
	ST7789_Init();	
	
	// установка ротации дисплея не обязательно так как по умолчанию стоит режим 1 ( всего 4 режима 1,2,3,4 )
	ST7789_rotation( 1 );

				// очистка только буфера кадра  ( при етом сам экран не очищаеться )
				//	#if FRAME_BUFFER	// если включен буфер кадра
				//			ST7789_ClearFrameBuffer();
				//	#endif

				// закрашиваем весь экран указаным цветом 
				ST7789_FillScreen( RGB565(255, 0, 0) );
				//#if FRAME_BUFFER	// если включен буфер кадра
				//		ST7789_Update();
				//#endif
				HAL_Delay (2000);
				// закрашиваем весь экран указаным цветом 
				ST7789_FillScreen( RGB565(0, 255, 0) );
				//#if FRAME_BUFFER	// если включен буфер кадра
				//		ST7789_Update();
				//#endif
				HAL_Delay (2000);
				// закрашиваем весь экран указаным цветом 
				ST7789_FillScreen( RGB565(0, 0, 255) );
				//#if FRAME_BUFFER	// если включен буфер кадра
				//		ST7789_Update();
				//#endif
				HAL_Delay (2000);
				
				// прямоугольник закрашеный ( координата X и Y ( начиная с 0 ) ширина и высота в пикселях )
				ST7789_DrawRectangleFilled(0, 0, 240, 240, RGB565(255, 255, 255)) ;
				//#if FRAME_BUFFER	// если включен буфер кадра
				//		ST7789_Update();
				//#endif
				HAL_Delay (1000);
				
				for( uint8_t i = 0; i< 240; i+=3){
					// прямоугольник закрашеный ( координата X и Y ( начиная с 0 ) ширина и высота в пикселях )
					ST7789_DrawRectangleFilled(i, i, 240-i, 240-i, RGB565(i/2, 255-i, 0+i)) ;
				}
				//#if FRAME_BUFFER	// если включен буфер кадра
				//		ST7789_Update();
				//#endif
				
				for( uint8_t i = 0; i< 120; i+=3){
					// прямоугольник пустотелый ( координата X и Y ( начиная с 0 ) ширина и высота в пикселях )
					ST7789_DrawRectangle(i, i, 240-i, 240-i, RGB565(255, 0, 0)) ;
				}
				//#if FRAME_BUFFER	// если включен буфер кадра
				//		ST7789_Update();
				//#endif
				
				HAL_Delay (2000);
				
				
		// рисуем цветную иконку. параметры координаты х и у ( начиная с 0 ), размер иконки шир и выс, имя иконки ( массив )
		//	ST7789_DrawImage( 80, 80, 85, 53, logoRGB	);
		//#if FRAME_BUFFER	// если включен буфер кадра
		//		ST7789_Update();
		//#endif		
	
	// закрашиваем весь экран указаным цветом 
	ST7789_FillScreen( RGB565(0, 10, 100) );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
				
	// печатаем символ ( один ) параметры: х,  у, ( начиная с 0 ),  цвет символа, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сам символ ( поддерживает кириллицу )
	// ST7789_DrawChar( 20, 20, RGB565( 255, 255, 255 ) , RGB565( 0, 10, 10 ) , 0, &Font_16x26, 3, 'F' );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// печатаем строку параметры: х,  у, ( начиная с 0 ), цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка ( поддерживает кириллицу )
	ST7789_print( 50, 20, RGB565(255, 255, 255) , RGB565(0, 10, 100) , 1, &Font_16x26, 1, "STM32 TFT" );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// печатаем строку параметры: х,  у, ( начиная с 0 ),  цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка ( поддерживает кириллицу )
	ST7789_print( 10, 160, RGB565(255, 0, 0) , RGB565(0, 10, 100) , 1, &Font_11x18, 1, "Классный дисплей !!!" );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// печатаем строку параметры: х,  у, ( начиная с 0 ),  цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка ( поддерживает кириллицу )
	ST7789_print( 8, 200, RGB565(0, 255, 0) , RGB565(0, 10, 100) , 1, &Font_7x9, 2, "ST7789 : 240x320" );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// печатаем символ с указаным углом, параметры: х,  у, ( начиная с 0 ), цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), угол поворота (0.0 - 360.0), самсимвол ( поддерживает кириллицу )
	ST7789_DrawCharWithAngle( 50, 50, RGB565(255, 255, 255) , RGB565(0, 10, 100) , 1, &Font_11x18, 1, 90.0, 'R' );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// печатаем строку с указаным углом, параметры: х,  у, ( начиная с 0 ), цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), угол поворота (0.0 - 360.0), сама строка ( поддерживает кириллицу )
	ST7789_printWithAngle( 100, 100, RGB565(255, 255, 255) , RGB565(0, 10, 100) , 1, &Font_11x18, 1, 180.0, "STM32 TFT" );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// рисуем цветную иконку. параметры координаты х и у ( начиная с 0 ), размер иконки шир и выс, имя иконки ( массив )
	ST7789_DrawImage( 0, 0, 85, 53, logoRGB );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// очистка экрана - закрашивает экран цветом черный
	//ST7789_Clear();
	// очистка только буфера кадра  ( при етом сам экран не очищаеться )
	//	#if FRAME_BUFFER	// если включен буфер кадра
	//			ST7789_ClearFrameBuffer();
	//	#endif
				
	// рисуем монохромную иконку. параметры координаты х и у ( начиная с 0 ), имя иконки ( массив ), размер иконки шир и выс, цвет отображения
	//ST7789_DrawBitmap( 60, 200, logo, 128, 27, RGB565(255, 0, 0) );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// рисуем монохромную иконку с указаным углом поворота, параметры координаты х и у ( начиная с 0 ), имя иконки ( массив ), размер иконки шир и выс, цвет отображения, угол поворота (0-360)
	ST7789_DrawBitmapWithAngle( 60, 150, logo, 128, 27, RGB565(255, 255, 255), 10.0 );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// очистка экрана - закрашивает экран цветом черный
	//ST7789_Clear();

	// круг пустотелый
	//ST7789_DrawCircle(50, 100, 50, RGB565(255, 0, 255));
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// круг закрашеный
	//ST7789_DrawCircleFilled(50, 290, 20, RGB565(255, 40, 255)) ;
	
	// рисуем элипс ( координаты центра, радиус по Х радиус по У, цвет )
	ST7789_DrawEllipse( 150, 150, 20, 80, RGB565(0, 0, 255) );
	
	// рисуем элипс закрашенный ( координаты центра, радиус по Х радиус по У, цвет )
	ST7789_DrawEllipseFilled( 150, 150, 80, 20, RGB565(0, 0, 255) );
	
	// рисуем элипс под указаным углом наклона ( координаты центра, радиус по Х радиус по У, угол поворота (0-360), цвет )
	ST7789_DrawEllipseWithAngle( 150, 150, 80, 20, 45.0, RGB565(0, 0, 255) );
	
	// рисуем элипс закрашенный под указаным углом наклона ( координаты центра, радиус по Х радиус по У, угол поворота (0-360), цвет )
	ST7789_DrawEllipseFilledWithAngle( 150, 150, 80, 20, 200.0, RGB565(0, 255, 0) );
	
	// линия
	//ST7789_DrawLine(1, 319, 239, 319, RGB565(255, 255, 0));
	
	// рисуем линию с указаным углом и длиной ( начальные координаты, длина линии, угол поворота (0-360), и цвет линии )
	ST7789_DrawLineWithAngle(100, 100, 50, 45.0, RGB565(255, 255, 255));
	
	// прямоугольник закрашеный
	//ST7789_DrawRectangleFilled(90, 265, 140, 310, RGB565(0, 255, 0)) ;
	
	// прямоугольник пустотелый
	//ST7789_DrawRectangle(160, 265, 220, 309, RGB565(255, 255, 255)) ;	
		
	// рисуем треугольник пустотелый
	//ST7789_DrawTriangle(60, 40, 150, 100, 200, 200, RGB565(100, 255, 150) );

	// рисуем треугольник закрашеный
	//ST7789_DrawFilledTriangle(20, 40, 150, 100, 200, 200, RGB565(100, 255, 150) );
		
	// рисуем прямоугольник с закругленными краями ( закрашенный )
	//ST7789_DrawFillRoundRect(10, 10, 50, 50, 10, RGB565(100, 255, 150));
	
	// рисуем прямоугольник с закругленными краями ( пустотелый )
	//ST7789_DrawRoundRect(10, 10, 50, 50, 10, RGB565(100, 255, 150));
	
	// рисуем полукруг ( правое или левое полушарие (параметр 1 или 2) ) закрашенный
	//ST7789_DrawFillCircleHelper(30, 30, 20 , 1, 0, RGB565(100, 255, 150));
	
	// рисуем дугу ( четверть круга (параметр 1, 2, 4, 8) ) шириной 1 пиксель
	//ST7789_DrawCircleHelper(30, 30, 20 , 1, RGB565(100, 255, 150));
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// переход в спящий режим
	//ST7789_SleepModeEnter();

	// выход их спящего режима
	//ST7789_SleepModeExit();	

	// вкл/выкл дисплея 0-выкл 1- вкл
	//ST7789_DisplayPower( 1 );

	// инверсия цветов 0-вкл  1-выкл
	//ST7789_InversionMode(1);
	
	// рисованиe дуга толстая ( часть круга ) ( координаты центра, радиус, начальный и конечный угол (0-360), цвет линии, толщина линии)
	// если нужно нарисовать наоборот другую часть то меняем начальный угол и конечный местами
	ST7789_DrawArc(100, 100, 50, 320, 220, RGB565(255, 255, 0), 5);
	ST7789_DrawArc(100, 100, 50, 220, 320, RGB565(255, 0, 255), 5);
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// линия толстая ( последний параметр толшина )
	ST7789_DrawLineThick(10, 120, 200, 140, RGB565(255, 255, 0), 5);
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// линия толстая нужной длины и указаным углом поворота (0-360) ( последний параметр толшина )
	ST7789_DrawLineThickWithAngle( 100, 100, 80, 90.0, RGB565(255, 255, 0), 10 );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
///////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	.........
	.........
	.........

while(1)===========================================================================================================================

	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
